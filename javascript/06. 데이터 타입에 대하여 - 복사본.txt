today 2020-12-7


07장 연산자 

>연산자란? 

	하나 이상의 표현식을 대상으로 산술, 할당, 비교, 논리, 타입, 지수연산등을 수행해 하나의 값을 만든다
	
>산술연산자 
	
	피연산자를 대상으로 계산을 수행해 새로운 숫자 값을 만든다. 산술 연산이 불가능하면 NaN을 반환한다

	이항 산술 연산자는 부수 효과가 없다
종류)	
	+(덧셈) 
	-(뺄셈) 
	*(곱하기) 
	/(나누기)
	%(나머지)

>단항 산술 연산자 

1개의 피연산자를 산술 연산하여 숫자 값을 만듦

종류)

	++ (증가)
	-- (감소)
	+ (효과 없음)
	- (양수를 음수로 음수를 양수로 반전 반환)

증가와 감소는 피연산자 값을 변경하는 부수 효과가 있다 암묵적인 할당이 이뤄짐!

	x++  // x = x + 1
	
	연산자의 위치에는 의미가 있다.
	
	x++ 할당 먼저 증가는 나중에
	
	++x 증가 먼저 할당은 나중에 

>문자열 연결 연산자 

+ 연산자는 피연산자중 하나라도 문자열이 있으면 연결 연산자로 동작한다!

예제 중 1 + true 는 true가 불리언 타입에서 숫자타입으로 강제 전환 되어 값이 2가 된다는 특징이 있다 
이것을 암묵적 타입 변환 또는 타입 강제 변환 이라고 한다~

>할당 연산자 
얘는 우항에 있는 피연산자의 평가결과를 좌항에 있는 변수에 할당 한다 

종류) 모두 부수효과 존재함 
	= 
	+= 
	-+ 
	*= 
	/= 	
	%=

할당문은 할당된 값으로 평가 되므로 표현식인 문 이다~ 이를 통해 연쇄 할당을 할 수 있다~


>비교 연산자 
	
	우항과 좌항의 피연산자를 비교하여 불리언 값으로 반환하는 얘다 
	if 문이나 for문과 같은 제어문의 조건식에서 주로 사용한다.

-동등/일치 비교 연산자
	
	동등 비교: 느슨한 비교 => 타입을 일치시킨후 비교/암묵적 타입 변환 (== / !=)
	일치 비교: 엄격한 비교 => 타입도 비교해야해~ (=== / !==)

	동등 비교 연산자는 사용하지 않는 편이 좋데....? 예측하기 힘드니까 난 남발해서 썼는뎈ㅋㅋㅋㅋ
	일치 비교 연산자인  ===를 사용하자~
	
	NaN을 주의!! NaN===NaN //false 인 유일한 애라서 
	isNaN 이라는 빌트인 함수를 사용해야한다~
	
	그리고 양의 0, 음의 0 도 주의! 
	동등/일치 비교 둘다 true를 반환한다!!!  이를 대체할 매서드 Object.is 가 있다고 함...





















	


